[{"/home/magneto/software/learning/university/fullstackopen/part2/phonebook/src/index.js":"1","/home/magneto/software/learning/university/fullstackopen/part2/phonebook/src/App.js":"2","/home/magneto/software/learning/university/fullstackopen/part2/phonebook/src/services/phonebook.js":"3"},{"size":145,"mtime":1726037413417,"results":"4","hashOfConfig":"5"},{"size":5659,"mtime":1726113511057,"results":"6","hashOfConfig":"5"},{"size":502,"mtime":1726055858474,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fanvm1",{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/home/magneto/software/learning/university/fullstackopen/part2/phonebook/src/index.js",[],"/home/magneto/software/learning/university/fullstackopen/part2/phonebook/src/App.js",["16"],"import React, { useEffect, useState } from 'react'\nimport phService from './services/phonebook'\n\nconst Notification = ({message, type}) => {\n  console.log(\"Call to Notification\")\n\n  if(message === null || type === null) {\n    console.log(\"Returning null, params: \", message, type)\n    return null\n  }\n\n  return(\n    <div className={type}>\n      {message}\n    </div>\n  )\n}\n\nconst Filter = (props) => <div>filter shown with <input value={props.search} onChange={props.handler}/></div>\n\nconst PersonForm = (props) => (\n  <form onSubmit={props.addPerson}>\n    <div>\n      name: <input value={props.newName} onChange={props.handleNameChange}/>\n    </div>\n    <div>\n      number: <input value={props.newNumber} onChange={props.handleNumberChange}/>\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n)\n\nconst Person = ( {person, deleteEntry} ) => {\n  \n  return (\n    <>\n      {`${person.name} ${person.number}`} <button onClick={() => deleteEntry(person.id)}>delete</button> <br />\n    </>\n  )\n}\n\nconst Persons = (props) => (\n  <div>\n    {props.persons.map( person => <Person key={person.id} person={person} deleteEntry={props.deleteEntry}/>)}\n  </div>\n)\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ search, setNewSearch ] = useState('')\n\n  const TYPE = {\n    ERROR: \"error\",\n    SUCCESS: \"success\"\n  }\n  const [ notification, setNotification ] = useState( {message: null, type: TYPE.ERROR})\n\n  const updateNotification = (message, type) => {\n    setNotification( {message: message, type: type} )\n    setTimeout( () => { setNotification( {message: null, type: null} ) }, 5000)\n  }\n\n  useEffect( () => {\n    phService\n      .getAll()\n      .then( phonebook => setPersons( phonebook ) )\n      .catch( error => { updateNotification(\"Unable to fetch phonebook from the server. Please refresh the page and try again!\", TYPE.ERROR) } ) \n  }, [])\n\n  const addPerson = (event) => {\n    event.preventDefault() // prevents default form behaviour which is to submit a post request\n\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n\n    if ( persons.map( person => person.name ).includes(newPerson.name) ) {\n      if ( persons.map( person => person.number).includes(newPerson.number) ){\n        updateNotification(`The entry ${newName} ${newNumber} is already added to the phonebook`, TYPE.ERROR )\n      } else {\n        const confirmed = window.confirm(`Update phone number for entry '${newPerson.name} to ${newPerson.number}'?`)\n        if (confirmed) {\n          phService\n          .update( persons.find( person => person.name === newPerson.name).id, newPerson )\n          .then( returnedPerson => {\n            setPersons(persons.map( person => person.name === newPerson.name ? returnedPerson : person ))\n            setNewName('')\n            setNewNumber('')\n            updateNotification(`Successfully updated phone number for entry '${newPerson.name}' to '${newPerson.number}'!`, TYPE.SUCCESS)\n          } )\n          .catch( error => {\n            updateNotification(`Error updating the number for the entry '${newPerson.name}' to the phonebook.\\n${error.response.data.error}.\\nPlease refresh the page and try again!`, TYPE.ERROR)\n          })\n        }\n      }\n      \n    } else {\n\n      phService\n        .create(newPerson)\n        .then( returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n          updateNotification(`Successfully created entry '${newPerson.name} ${newPerson.number}'!`, TYPE.SUCCESS)\n        } )\n        .catch( error => {\n          updateNotification(`Error submitting the new entry: ${newPerson.name} ${newPerson.number} to the phonebook.\\n${error.response.data.error}.\\nPlease try again!`, TYPE.ERROR)\n        })\n    }\n  }\n\n  const deleteEntry = (id) => {\n    const personToDel = persons.find( person => person.id === id)\n    const confirmed = window.confirm(`Delete entry ${personToDel.name} ${personToDel.number}?`)\n    \n    if(!confirmed) { \n      updateNotification(`the deletion of entry ${personToDel.name} ${personToDel.number} was cancelled`, TYPE.SUCCESS)\n    } else {\n      phService\n      .deleteEntry(id)\n      .then( response => {\n          console.log(response)\n          setPersons( persons.filter( person => person.id !== personToDel.id ) )\n          updateNotification(`Successfully deleted entry ${personToDel.name} ${personToDel.number}`, TYPE.SUCCESS)\n        }\n      ).catch( error => {\n          updateNotification(`Unable to delete entry ${personToDel.name} ${personToDel.number} from the server. Please try again!`, TYPE.ERROR)\n      })\n    }\n  }\n\n  const personsToShow = ( search ) => search === ''\n    ? persons\n    : persons.filter( person => person.name.toLowerCase().includes( search.toLowerCase() ))\n\n\n  const updateSearch = (event) => {\n    setNewSearch(event.target.value)\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  return (\n    <div>\n      <Notification message={notification.message} type={notification.type}/>\n      <h2>Phonebook</h2>\n      <Filter search={search} handler={updateSearch}/>\n      <h3>add a new entry</h3>\n      <PersonForm addPerson={addPerson} newName={newName} newNumber={newNumber} handleNameChange={handleNameChange} handleNumberChange={handleNumberChange} />\n      <h3>Numbers</h3>\n      <Persons persons={personsToShow(search)} deleteEntry={deleteEntry}/>\n    </div>\n  )\n}\n\nexport default App","/home/magneto/software/learning/university/fullstackopen/part2/phonebook/src/services/phonebook.js",["17"],"import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  return axios.get(baseUrl).then(response => response.data)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject).then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject).then(response => response.data)\n}\n\nconst deleteEntry = (id) => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default { getAll, create, update, deleteEntry }",{"ruleId":"18","severity":1,"message":"19","line":73,"column":6,"nodeType":"20","endLine":73,"endColumn":8,"suggestions":"21"},{"ruleId":"22","severity":1,"message":"23","line":21,"column":1,"nodeType":"24","endLine":21,"endColumn":55},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'TYPE.ERROR'. Either include it or remove the dependency array.","ArrayExpression",["25"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"26","fix":"27"},"Update the dependencies array to be: [TYPE.ERROR]",{"range":"28","text":"29"},[1994,1996],"[TYPE.ERROR]"]